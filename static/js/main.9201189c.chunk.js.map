{"version":3,"sources":["GetWeatherData.js","SearchCity.js","GetTempData.js","WeatherInfo.js","App.js","reportWebVitals.js","index.js"],"names":["API_KEY","process","tempCard","day","time","temp","high_temp","low_temp","icon","tempCards","days","GetWeatherData","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleLatLonChange","bind","assertThisInitialized","_this2","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","then","value","lat","coords","latitude","lon","longitude","fetch","concat","res","json","onCityChange","name","catch","err","console","error","i","currTempCard","create","tempData","list","main","Date","dt","getDay","dt_txt","temp_max","temp_min","weather","react_default","a","createElement","uil_raindrops","size","color","uil_snowflake","uil_clouds","uil_cloud_sun","uil_sun","push","onTempCardsChange","onDataLoaded","onLatLonChange","dataIsLoaded","cityname","React","Component","address","city_name","state_code","country_code","SearchCity","state","places","searchTerm","addressAutocomplete","handleChange","handleSubmit","handleAutoSubmit","response","ok","Error","data","coord","event","results","log","addresses","length","currAddress","city","formatted","setState","callWeatherAPI","weatherData","callForecastAPI","forecastData","di_text","onCitySubmit","onTempChange","onCitySearchChange","target","searchCity","citysearch","preventDefault","Autocomplete","id","options","getOptionLabel","option","renderInput","params","TextField","assign","label","freeSolo","disableClearable","onInputChange","onChange","tempTextStyle","GetTempData","Grid","container","justifyContent","columns","spacing","map","item","Card","sx","bgcolor","boxShadow","CardContent","Typography","style","WeatherInfo","currcity","handleCitySearchChange","handleCityChange","handleTempChange","handleDataLoadedChange","handleTempCardsChange","searchname","Box","mb","p","borderRadius","src_SearchCity","src_GetWeatherData","src_GetTempData","theme","createTheme","palette","primary","grey","secondary","App","ThemeProvider","className","src_WeatherInfo","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App_0"],"mappings":"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","file":"static/js/main.9201189c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport UilSnowflake from '@iconscout/react-unicons/icons/uil-snowflake';\r\nimport UilSun from '@iconscout/react-unicons/icons/uil-sun';\r\nimport UilRain from '@iconscout/react-unicons/icons/uil-raindrops';\r\nimport UilCloudy from '@iconscout/react-unicons/icons/uil-clouds';\r\nimport UilWarm from '@iconscout/react-unicons/icons/uil-cloud-sun';\r\n\r\n// Open Weather API Key\r\nconst API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\r\n\r\n// Data for holding forecast info.\r\nconst cnt = 40;\r\nconst tempCard = {\r\n    day: null,\r\n    time: null,\r\n    temp: null,\r\n    high_temp: null,\r\n    low_temp: null,\r\n    icon: null,\r\n}\r\nvar tempCards = [];\r\nconst days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n\r\nclass GetWeatherData extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleLatLonChange = this.handleLatLonChange.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        let locPromise = new Promise(function(resolve, reject) {\r\n            navigator.geolocation.getCurrentPosition(resolve, reject);\r\n        });\r\n\r\n        locPromise\r\n            .then((value) => {\r\n                let lat = value.coords.latitude;\r\n                let lon = value.coords.longitude;\r\n                this.handleLatLonChange(lat, lon);\r\n\r\n                // Get current city name based off lat and lon.\r\n                fetch(`http://api.openweathermap.org/geo/1.0/reverse?lat=${lat}&lon=${lon}&appid=${API_KEY}`)\r\n                    .then(res => res.json())\r\n                    .then(json => {\r\n                        this.props.onCityChange(json[0].name);\r\n                    })\r\n                    .catch(err => console.error(err));\r\n\r\n                // Get the forecast based off lat and lon.\r\n                fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&cnt=${cnt}&appid=${API_KEY}&units=imperial`)\r\n                    .then(res => res.json())\r\n                    .then(json => {\r\n                        // console.log(json);\r\n\r\n                        // Empty temperature cards array\r\n                        tempCards = [];\r\n\r\n                        // Fill array with temperature data cards\r\n                        for (let i = 0; i < cnt; i++) {\r\n                            let currTempCard = Object.create(tempCard);\r\n                            let tempData = json.list[i].main;\r\n                            currTempCard.day = days[new Date(json.list[i].dt * 1000).getDay()];\r\n                            currTempCard.time = json.list[i].dt_txt;\r\n                            currTempCard.temp = tempData.temp;\r\n                            currTempCard.high_temp = tempData.temp_max;\r\n                            currTempCard.low_temp = tempData.temp_min;\r\n\r\n                            if (json.list[i].weather[0].main === \"Rain\") {\r\n                                currTempCard.icon = <UilRain size=\"100\" color=\"#61DAFB\" />\r\n                            } else {\r\n                                if (tempData.temp < 30) {\r\n                                    currTempCard.icon = <UilSnowflake size=\"100\" color=\"#61DAFB\" />\r\n                                } else if (tempData.temp < 50) {\r\n                                    currTempCard.icon = <UilCloudy size=\"100\" color=\"#61DAFB\" />\r\n                                } else if (tempData.temp < 70) {\r\n                                    currTempCard.icon = <UilWarm size=\"100\" color=\"#61DAFB\" />\r\n                                } else if (tempData.temp < 90) {\r\n                                    currTempCard.icon = <UilSun size=\"100\" color=\"#61DAFB\" />\r\n                                } else {\r\n                                    currTempCard.icon = <UilSun size=\"100\" color=\"#61DAFB\" />\r\n                                }\r\n                            }\r\n\r\n                            tempCards.push(currTempCard); \r\n                        }\r\n\r\n                        this.props.onTempCardsChange(tempCards);\r\n                    });\r\n\r\n                this.props.onDataLoaded();\r\n            })\r\n            .catch(err => console.error(err));\r\n    }\r\n\r\n    handleLatLonChange(lat, lon) {\r\n        this.props.onLatLonChange(lat, lon);\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.dataIsLoaded) {\r\n            return (\r\n                <p>Please wait...</p>\r\n            )\r\n        } else {\r\n            return(\r\n                <div>\r\n                    <p>Coordinates: {this.props.lat}, {this.props.lon}</p>\r\n                    <p>Current City Name: {this.props.cityname}</p>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default GetWeatherData;","import React from \"react\";\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport TextField from '@mui/material/TextField';\r\nimport UilSnowflake from '@iconscout/react-unicons/icons/uil-snowflake';\r\nimport UilSun from '@iconscout/react-unicons/icons/uil-sun';\r\nimport UilRain from '@iconscout/react-unicons/icons/uil-raindrops';\r\nimport UilCloudy from '@iconscout/react-unicons/icons/uil-clouds';\r\nimport UilWarm from '@iconscout/react-unicons/icons/uil-cloud-sun';\r\n\r\n// Open Weather API Key\r\nconst API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\r\n\r\n// Geoapify API Key\r\nconst GEOAPIFY_AUTOCOMPLETE_API_KEY = process.env.REACT_APP_GEOAPIFY_API_KEY;\r\n\r\n// Data for holding forecast info.\r\nconst cnt = 40;\r\nconst tempCard = {\r\n    day: null,\r\n    time: null,\r\n    temp: null,\r\n    high_temp: null,\r\n    low_temp: null,\r\n    icon: null,\r\n};\r\nvar tempCards = [];\r\nconst days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n\r\n// Data for holding city info.\r\nconst address = {\r\n    city_name: null,\r\n    state_code: null,\r\n    country_code: null,\r\n    address: null\r\n};\r\n\r\nclass SearchCity extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            places: [],\r\n            searchTerm: null\r\n        }\r\n\r\n        this.addressAutocomplete = this.addressAutocomplete.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleAutoSubmit = this.handleAutoSubmit.bind(this);\r\n    }\r\n\r\n    async callWeatherAPI(city_name, state_code, country_code) {\r\n        const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city_name},${state_code},${country_code}&appid=${API_KEY}&units=imperial`)\r\n            .catch((err) => {\r\n                console.error(\"Weather API call has error: \", err);\r\n            });\r\n\r\n        if (response.ok) {\r\n            return await response.json();\r\n        } else {\r\n            throw new Error(\"Weather API call has invalid input.\");\r\n        }\r\n    }\r\n\r\n    async callForecastAPI(data) {\r\n        const response = await fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${data.coord.lat}&lon=${data.coord.lon}&cnt=${cnt}&appid=${API_KEY}&units=imperial`)\r\n            .catch((err) => {\r\n                console.error(\"Forecast API call has error: \", err);\r\n            });\r\n\r\n        if (response.ok) {\r\n            return await response.json();\r\n        } else {\r\n            throw new Error(\"Forecast API call has invalid input.\");\r\n        }\r\n    }\r\n\r\n    async addressAutocomplete(event, value) {      \r\n        fetch(`https://api.geoapify.com/v1/geocode/autocomplete?text=${value}&type=city&format=json&apiKey=${GEOAPIFY_AUTOCOMPLETE_API_KEY}`)\r\n            .then((res) => {\r\n                if (res.ok) {\r\n                    return res.json();\r\n                } else {\r\n                    throw new Error(\"Geoapify API call has invalid input.\");\r\n                }\r\n            })\r\n            .then((data) => {\r\n                let results = data.results;\r\n                console.log(results);\r\n\r\n                let addresses = [];\r\n                for (let i = 0; i < results.length; i++) {\r\n                    let currAddress = Object.create(address);\r\n                    currAddress.city_name = results[i].city;\r\n                    currAddress.state_code = results[i].state_code;\r\n                    currAddress.country_code = results[i].country_code;\r\n                    currAddress.address = results[i].formatted;\r\n                    addresses.push(currAddress);\r\n                }\r\n\r\n                this.setState({places: addresses});\r\n                console.log(this.state.places);\r\n            })\r\n            .catch((err) => {\r\n                console.error('Error calling Geoapify API: ', err);\r\n            });\r\n    }\r\n    \r\n    // Search City API Call\r\n    async searchCity(city_name, state_code, country_code) {\r\n        console.log(\"City Searched: \" + city_name);\r\n\r\n        let weatherData = await this.callWeatherAPI(city_name, state_code, country_code);\r\n        let forecastData = await this.callForecastAPI(weatherData);\r\n\r\n        // Empty temperature cards array\r\n        tempCards = [];\r\n\r\n        // Fill array with temperature data cards\r\n        for (let i = 0; i < cnt; i++) {\r\n            let currTempCard = Object.create(tempCard);\r\n            let tempData = forecastData.list[i].main;\r\n            currTempCard.day = days[new Date(forecastData.list[i].dt * 1000).getDay()];\r\n            currTempCard.time = forecastData.list[i].di_text;\r\n            currTempCard.temp = tempData.temp;\r\n            currTempCard.high_temp = tempData.temp_max;\r\n            currTempCard.low_temp = tempData.temp_min;\r\n\r\n            if (forecastData.list[i].weather[0].main === \"Rain\") {\r\n                currTempCard.icon = <UilRain size=\"100\" color=\"#61DAFB\" />\r\n            } else {\r\n                if (tempData.temp < 30) {\r\n                    currTempCard.icon = <UilSnowflake size=\"100\" color=\"#61DAFB\" />\r\n                } else if (tempData.temp < 50) {\r\n                    currTempCard.icon = <UilCloudy size=\"100\" color=\"#61DAFB\" />\r\n                } else if (tempData.temp < 70) {\r\n                    currTempCard.icon = <UilWarm size=\"100\" color=\"#61DAFB\" />\r\n                } else if (tempData.temp < 90) {\r\n                    currTempCard.icon = <UilSun size=\"100\" color=\"#61DAFB\" />\r\n                } else {\r\n                    currTempCard.icon = <UilSun size=\"100\" color=\"#61DAFB\" />\r\n                }\r\n            }\r\n\r\n            tempCards.push(currTempCard);\r\n        }\r\n\r\n        // Send this data to GetWeatherData\r\n        this.props.onCitySubmit(city_name);\r\n        this.props.onLatLonChange(weatherData.coord.lat, weatherData.coord.lon);\r\n        this.props.onTempChange(weatherData.main.temp);\r\n\r\n        // Send this data to GetTempData\r\n        this.props.onTempCardsChange(tempCards);\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.props.onCitySearchChange(event.target.value);\r\n        this.addressAutocomplete(event, event.target.value);\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        this.searchCity(this.props.citysearch);\r\n        event.preventDefault();\r\n    }\r\n\r\n    handleAutoSubmit(event, value) {\r\n        // Set current state search term to the selected\r\n        // value.\r\n        this.setState({searchTerm: value}, function() {this.searchCity(this.state.searchTerm.city_name, this.state.searchTerm.state_code, this.state.searchTerm.country_code)});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Autocomplete \r\n                id=\"citysearch-autocomplete\"\r\n                options={this.state.places}\r\n                getOptionLabel={(option) => option.address}\r\n                renderInput={(params) => <TextField {...params} label=\"City Name\" />}\r\n                freeSolo\r\n                disableClearable\r\n                onInputChange={this.addressAutocomplete}\r\n                onChange={this.handleAutoSubmit}\r\n                value={this.state.searchTerm || null}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchCity;","import React from 'react';\r\nimport Grid from '@mui/material/Grid';\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Typography from '@mui/material/Typography';\r\n\r\n// Open Weather API Key\r\n// const API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\r\n\r\nconst tempTextStyle = {\r\n    color: \"white\",\r\n}\r\n\r\n/* const tempCard = {\r\n    day: null,\r\n    temp: null,\r\n    high_temp: null,\r\n    low_temp: null,\r\n}\r\nvar tempCards = []; */\r\n\r\nconst cnt = 5;\r\n\r\nclass GetTempData extends React.Component {\r\n    /* constructor(props) {\r\n        super(props);\r\n    } */\r\n\r\n    /* componentDidMount() {\r\n        let locPromise = new Promise(function(resolve, reject) {\r\n            navigator.geolocation.getCurrentPosition(resolve, reject);\r\n        });\r\n\r\n        locPromise\r\n            .then((value) => {\r\n                let lat = value.coords.latitude;\r\n                let lon = value.coords.longitude;\r\n\r\n                // Get weather based off lat and lon.\r\n                fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&cnt=${cnt}&appid=${API_KEY}&units=imperial`)\r\n                    .then(res => res.json())\r\n                    .then(json => {\r\n                        this.props.onDataLoaded();\r\n\r\n                        tempCards = [];\r\n\r\n                        // Fill array with temperature data cards\r\n                        for (let i = 0; i < cnt; i++) {\r\n                            let currTempCard = Object.create(tempCard);\r\n                            let tempData = json.list[i].main;\r\n                            currTempCard.day = json.list[i].dt_txt;\r\n                            currTempCard.temp = tempData.temp;\r\n                            currTempCard.high_temp = tempData.temp_max;\r\n                            currTempCard.low_temp = tempData.temp_min;\r\n                            tempCards.push(currTempCard);\r\n                        }\r\n\r\n                        // console.log(tempCards);\r\n                    })\r\n                    .catch(err => console.error(err));\r\n            })\r\n            .catch(err => console.error(err));\r\n    } */\r\n\r\n    render() {\r\n        if (!this.props.dataIsLoaded) {\r\n            return (\r\n                <p>Please wait...</p>\r\n            )\r\n        } else {\r\n            return(\r\n                <Grid container justifyContent=\"space-evenly\" columns={cnt} spacing={2}>\r\n                    {/* Take each object in tempCards arr and create\r\n                    a new Card component out of them.\r\n                    Return an array of card components */}\r\n                    {this.props.tempCards.map(function(tempCard) {\r\n                        return(\r\n                            <Grid item>\r\n                                <Card\r\n                                    sx={{\r\n                                        bgcolor: 'primary.main',\r\n                                        boxShadow: 3,\r\n                                    }} \r\n                                >\r\n                                    <CardContent>\r\n                                        <Typography style={tempTextStyle}>\r\n                                            {tempCard.day} <br/>\r\n                                            Time: {tempCard.time} <br/>\r\n                                            {tempCard.icon} <br/>\r\n                                            Temperature: {tempCard.temp} <br/>\r\n                                            High: {tempCard.high_temp} <br/>\r\n                                            Low: {tempCard.low_temp} \r\n                                        </Typography>\r\n                                    </CardContent>\r\n                                </Card>\r\n                            </Grid>\r\n                        );\r\n                    })}\r\n                </Grid>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default GetTempData;","import React from \"react\";\r\nimport GetWeatherData from './GetWeatherData';\r\nimport SearchCity from './SearchCity';\r\nimport GetTempData from './GetTempData';\r\nimport Box from '@mui/material/Box';\r\n\r\n// Data for holding forecast info.\r\n/* const cnt = 5;\r\nconst tempCard = {\r\n    day: null,\r\n    temp: null,\r\n    high_temp: null,\r\n    low_temp: null,\r\n}\r\nvar tempCards = []; */\r\n\r\nclass WeatherInfo extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            lat: null,\r\n            lon: null,\r\n            citysearch: '',\r\n            currcity: null,\r\n            temp: null,\r\n            tempCards: [],\r\n            dataIsLoaded: false\r\n        };\r\n\r\n        this.handleCitySearchChange = this.handleCitySearchChange.bind(this);\r\n        this.handleCityChange = this.handleCityChange.bind(this);\r\n        this.handleLatLonChange = this.handleLatLonChange.bind(this);\r\n        this.handleTempChange = this.handleTempChange.bind(this);\r\n        this.handleDataLoadedChange = this.handleDataLoadedChange.bind(this);\r\n        this.handleTempCardsChange = this.handleTempCardsChange.bind(this);\r\n    }\r\n\r\n    // Saves the current city name typed in SearchCity\r\n    // to the parent class.\r\n    handleCitySearchChange(searchname) {\r\n        this.setState({citysearch: searchname});\r\n    }\r\n\r\n    // Handles setting the current city name\r\n    // to parent city name.\r\n    handleCityChange(cityname) {\r\n        this.setState({currcity: cityname});\r\n    }\r\n\r\n    // Handles setting the current latitude and\r\n    // longitude\r\n    handleLatLonChange(lat, lon) {\r\n        this.setState({\r\n            lat: lat,\r\n            lon: lon,\r\n        });\r\n    }\r\n\r\n    // Handles setting the temperature in\r\n    // the city searched\r\n    handleTempChange(temp) {\r\n        this.setState({temp: temp});\r\n    }\r\n\r\n    handleTempCardsChange(tempCards) {\r\n        this.setState({tempCards: tempCards});\r\n    }\r\n\r\n    // Handles when weather data is loaded\r\n    // and changes dataIsLoaded to true.\r\n    handleDataLoadedChange() {\r\n        this.setState({dataIsLoaded: true});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"weatherInfoDiv\">\r\n                <Box \r\n                    sx={{\r\n                        mb: 3,\r\n                        p: 5,\r\n                        borderRadius: 2, \r\n                        bgcolor: 'rgba(167, 192, 205, 0.5)',\r\n                    }}\r\n                >\r\n                    <SearchCity\r\n                        citysearch={this.state.citysearch} \r\n                        onCitySearchChange={this.handleCitySearchChange}\r\n                        onCitySubmit={this.handleCityChange}\r\n                        onLatLonChange={this.handleLatLonChange}\r\n                        onTempChange={this.handleTempChange} \r\n                        onTempCardsChange={this.handleTempCardsChange}\r\n                    />\r\n                    <GetWeatherData \r\n                        lat={this.state.lat}\r\n                        lon={this.state.lon}\r\n                        cityname={this.state.currcity}\r\n                        temp={this.state.temp}\r\n                        dataIsLoaded={this.state.dataIsLoaded}\r\n                        onDataLoaded={this.handleDataLoadedChange}\r\n                        onCityChange={this.handleCityChange}\r\n                        onLatLonChange={this.handleLatLonChange}\r\n                        onTempChange={this.handleTempChange} \r\n                        onTempCardsChange={this.handleTempCardsChange}\r\n                    />\r\n                </Box>\r\n                <GetTempData \r\n                    lat={this.state.lat}\r\n                    lon={this.state.lon}\r\n                    temp={this.state.temp}\r\n                    tempCards={this.state.tempCards}\r\n                    dataIsLoaded={this.state.dataIsLoaded}\r\n                    onDataLoaded={this.handleDataLoadedChange}\r\n                    onTempChange={this.handleTempChange} \r\n                />\r\n            </div>\r\n        );\r\n    }   \r\n}\r\n\r\nexport default WeatherInfo;","import './App.css';\r\nimport React from 'react';\r\nimport WeatherInfo from './WeatherInfo';\r\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\r\nimport { grey } from '@mui/material/colors';\r\n\r\n// Theme\r\nconst theme = createTheme({\r\n  palette: {\r\n      primary: {\r\n        main: grey[900],\r\n        secondary: grey[500]\r\n      },\r\n  },\r\n});\r\n\r\nclass App extends React.Component {\r\n  // Used for HTML + JSX\r\n  render() {\r\n    return (\r\n      <ThemeProvider theme={theme}>\r\n        <div className='App'>\r\n          <h1>Weather App</h1>\r\n          <WeatherInfo />\r\n        </div>\r\n      </ThemeProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App /> \n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}